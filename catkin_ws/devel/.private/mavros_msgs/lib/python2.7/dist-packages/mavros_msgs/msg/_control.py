# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mavros_msgs/control.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mavros_msgs.msg

class control(genpy.Message):
  _md5sum = "b22c3da27199b85b440e51dfef537fee"
  _type = "mavros_msgs/control"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint16 uav_no
mavros_msgs/Waypoint waypoint

================================================================================
MSG: mavros_msgs/Waypoint
# Waypoint.msg
#
# ROS representation of MAVLink MISSION_ITEM
# See mavlink documentation



# see enum MAV_FRAME
uint8 frame
uint8 FRAME_GLOBAL = 0
uint8 FRAME_LOCAL_NED = 1
uint8 FRAME_MISSION = 2
uint8 FRAME_GLOBAL_REL_ALT = 3
uint8 FRAME_LOCAL_ENU = 4

# see enum MAV_CMD and CommandCode.msg
uint16 command

bool is_current
bool autocontinue
# meaning of this params described in enum MAV_CMD
float32 param1
float32 param2
float32 param3
float32 param4
float64 x_lat
float64 y_long
float64 z_alt
"""
  __slots__ = ['uav_no','waypoint']
  _slot_types = ['uint16','mavros_msgs/Waypoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       uav_no,waypoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.uav_no is None:
        self.uav_no = 0
      if self.waypoint is None:
        self.waypoint = mavros_msgs.msg.Waypoint()
    else:
      self.uav_no = 0
      self.waypoint = mavros_msgs.msg.Waypoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HBH2B4f3d().pack(_x.uav_no, _x.waypoint.frame, _x.waypoint.command, _x.waypoint.is_current, _x.waypoint.autocontinue, _x.waypoint.param1, _x.waypoint.param2, _x.waypoint.param3, _x.waypoint.param4, _x.waypoint.x_lat, _x.waypoint.y_long, _x.waypoint.z_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.waypoint is None:
        self.waypoint = mavros_msgs.msg.Waypoint()
      end = 0
      _x = self
      start = end
      end += 47
      (_x.uav_no, _x.waypoint.frame, _x.waypoint.command, _x.waypoint.is_current, _x.waypoint.autocontinue, _x.waypoint.param1, _x.waypoint.param2, _x.waypoint.param3, _x.waypoint.param4, _x.waypoint.x_lat, _x.waypoint.y_long, _x.waypoint.z_alt,) = _get_struct_HBH2B4f3d().unpack(str[start:end])
      self.waypoint.is_current = bool(self.waypoint.is_current)
      self.waypoint.autocontinue = bool(self.waypoint.autocontinue)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HBH2B4f3d().pack(_x.uav_no, _x.waypoint.frame, _x.waypoint.command, _x.waypoint.is_current, _x.waypoint.autocontinue, _x.waypoint.param1, _x.waypoint.param2, _x.waypoint.param3, _x.waypoint.param4, _x.waypoint.x_lat, _x.waypoint.y_long, _x.waypoint.z_alt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.waypoint is None:
        self.waypoint = mavros_msgs.msg.Waypoint()
      end = 0
      _x = self
      start = end
      end += 47
      (_x.uav_no, _x.waypoint.frame, _x.waypoint.command, _x.waypoint.is_current, _x.waypoint.autocontinue, _x.waypoint.param1, _x.waypoint.param2, _x.waypoint.param3, _x.waypoint.param4, _x.waypoint.x_lat, _x.waypoint.y_long, _x.waypoint.z_alt,) = _get_struct_HBH2B4f3d().unpack(str[start:end])
      self.waypoint.is_current = bool(self.waypoint.is_current)
      self.waypoint.autocontinue = bool(self.waypoint.autocontinue)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HBH2B4f3d = None
def _get_struct_HBH2B4f3d():
    global _struct_HBH2B4f3d
    if _struct_HBH2B4f3d is None:
        _struct_HBH2B4f3d = struct.Struct("<HBH2B4f3d")
    return _struct_HBH2B4f3d
